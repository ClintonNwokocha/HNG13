"""
Image generation for country statistics summary.
Creates a visual summary image with PIL/Pillow
"""

from PIL import Image, ImageDraw, ImageFont
from typing import List
from datetime import datetime
import os
from app import models


def generate_summary_image(
    total_countries: int,
    top_countries: List[models.Country],
    last_refresh: datetime,
    output_path: str = "cache/summary.png"
):
    """
    Generate summary image with country statistics.

    Args:
        total_countries: Total number of countries
        top_countries: List of top 5 countries by GDP
        last_refresh: Timestamp of last refresh
        output_path: Where to save

    """

    # Image dimensions
    width, height = 800, 600

    # Colors
    bg_color = (255, 255, 255)
    text_color = (0, 0, 0)
    header_color = (41, 128, 185)
    line_color = (200, 200, 200)

    # Create image
    img = Image.new('RGB', (width, height), bg_color)
    draw = ImageDraw.Draw(img)

    # Try to use a better font, fall back to default if not available
    try:
        title_font = ImageFont.truetype("arial.ttf", 32)
        heading_font = ImageFont.truetype("arial.ttf", 24)
        text_font = ImageFont.truetype("arial.ttf", 18)
        small_font = ImageFont.truetype("arial.ttf", 14)
    except:
        try:
            # Try Linux fonts
            title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
            heading_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
            text_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18)
            small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
        except:
            # Fallback to default font
            title_font = ImageFont.load_default()
            heading_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
            small_font = ImageFont.load_default()

    # Draw header background
    draw.rectangle([(0, 0), (width, 80)], fill=header_color)

    # Draw title
    title = "Country Currency API - Summary"
    title_bbox = draw.textbbox((0, 0), title, font=title_font)
    title_width = title_bbox[2] - title_bbox[0]
    draw.text(((width - title_width) / 2, 25), title, fill=(255, 255, 255), font=title_font)

    # Current Y position
    y = 100

    # Total countries
    draw.text((50, y), f"Total Countries: {total_countries}", fill=text_color, font=heading_font)
    y += 50

    # Separator line
    draw.line([(50, y), (width - 50, y)], fill=line_color, width=2)
    y += 30

    # Top 5 countries heading
    draw.text((50, y), "Top 5 Countries by GDP:", fill=header_color, font=heading_font)
    y += 4

    # List top countries
    for i, country in enumerate(top_countries, 1):
        gdp_formatted = f"{country.estimated_gdp:,.0f}" if country.estimated_gdp else "N/A"
        currency = country.currency_code or "N/A"

        text = f"{i}. {country.name} - ${gdp_formatted} ({currency})"
        draw.text((70, y), text, fill=text_color, font=text_font)
        y += 35

    # Separator line
    y += 20
    draw.line([(50, y), (width - 50, y)], fill=line_color, width=2)
    y += 30

    # Last refresh timestamp
    refresh_text = f"Last Updated: {last_refresh.strftime('%Y-%m-%d %H:%M:%S UTC')}"
    draw.text((50, y), refresh_text, fill=text_color, font=small_font)

    # Footer
    y = height - 40
    footer_text = "Generated by Country Currency API"
    footer_bbox = draw.textbbox((0, 0), footer_text, font=small_font)
    footer_width = footer_bbox[2] - footer_bbox[0]
    draw.text(((width - footer_width) / 2, y), footer_text, fill=(128, 128, 128), font=small_font)

    # Ensure cache directory exists
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # Save image
    img.save(output_path)
    print(f"âœ… Summary image saved to {output_path}")

